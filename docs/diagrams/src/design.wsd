@startuml deployView

node client { 
    component Browser
}

node frontServer {
    component front as "ust-uml:front"
    component Angular
    component pako
    component yaml as "js-yaml"
    component bootstrap
    component jquery
    component monaco as "ngx-monaco-editor"
    component rxjs
}

node backServer {
    component back as "ust-uml:back"
    component spring as "spring-boot"
    component lombok
    component jacoco
}

front .down.> Angular
front .down.> pako
front .down.> yaml
front .down.> bootstrap
front .down.> jquery
front .down.> monaco
front .down.> rxjs
back .down.> spring
back .down.> lombok
back .down.> jacoco

node databaseServer {
    component MongoDB
}

client -down- backServer: tcp/ip
client -down- frontServer: tcp/ip
Browser -down- back: http
Browser -down- front: http
backServer -down- databaseServer: mongoDB
@enduml

@startuml usecase_design
package frontend <<angular:11>>{
    boundary XTemplate <<HTML>>
    boundary XComponent <<TypeScript>>
    boundary XStyle <<CSS>>
    control XService <<TypeScript>>
    entity HTTPService
    entity XDto <<java>>
}
XComponent --left-> XTemplate
XTemplate --down-> XStyle
XComponent --down-> XService
XComponent --down-> XDto
XService o--down- HTTPService
XService --down-> XDto

package analysis{
    boundary XView
    control XController
    entity XModel 
}

XView -down-> XController
XView -down-> XModel
XController -down-> XModel

package backend <<spring-boot:2.4.5>>{
    control "XService - java" as XServiceJava
    control "XResource - java" as XResourceJava
    entity "XRepository - java" as XRepositoryJava
    entity "XEntity - java" as XEntityJava
    entity "XDto - java" as XDtoJava
    entity "XModel - java" as XModelJava
}

XServiceJava --down-> XRepositoryJava
XServiceJava --down-> XModelJava
XRepositoryJava --down-> XEntityJava
XRepositoryJava --down-> XModelJava
XResourceJava --down-> XDtoJava
XResourceJava --down-> XServiceJava
XResourceJava --down-> XModelJava
XDtoJava --down-> XModelJava
XEntityJava --down-> XModelJava

XComponent ...up.> XView : <<trace>>
XTemplate ...up.> XView : <<trace>>
XStyle ...up.> XView : <<trace>>
XService ...up.> XController : <<trace>>
XDto ...up.> XModel : <<trace>>
XDto ...down.> XDtoJava : <<trace>>
XRepositoryJava ...up.> XModel : <<trace>>
XResourceJava ...up.>  XModel : <<trace>>
XServiceJava ...up.>  XModel : <<trace>>
XDtoJava ...up.>  XModel : <<trace>>
XEntityJava ...up.>  XModel : <<trace>>
XService ...down.>  XResourceJava : <<trace>>
XModelJava ...up.>  XModel : <<trace>>
@enduml

@startuml addClassInterpreters_design
object ":InterpretersStack" as InterpretersStack
object ":AccountInterpreter" as AccountInterpreter
object ":ProjectInterpreter" as ProjectInterpreter
object ":PackageInterpreter" as PackageInterpreter

InterpretersStack -down-> AccountInterpreter
InterpretersStack -down-> ProjectInterpreter
InterpretersStack -down-> PackageInterpreter

object ":ClassParser" as ClassParser

PackageInterpreter .down.> ClassParser

object ":Account" as Account {
    name = accaunt
    email = name@email.com
}
object ":Project" as Project {
    name = project
}
object ":Package" as Package {
    name = package
}
object ":Class" as Class {
    name = class
}

Account -down-> Project
Project -down-> Package
Package -down-> Class
ClassParser .down.> Class

AccountInterpreter -down-> Account
ProjectInterpreter -down-> Project
PackageInterpreter -down-> Package
@enduml

@startuml reverseEngineering
package "reverseEngineering" as 60cb13181378a01d58d76103 {
  class "Directory" as 60cb13181378a01d58d76104 {
      - file: File
      + delete(): void
      + getName(): String
      + getPath(): String
      + listFiles(): File[]
      + getFile(): File
    }
  class "FileClassParser" as 60cb13181378a01d58d76105 {
      - clazz: Class
      + get(file: File): Class
      + visit(declaration: ClassOrInterfaceDeclaration, arg: Void): void
      + visit(declaration: EnumDeclaration, arg: Void): void
      + visit(declaration: AnnotationDeclaration, arg: Void): void
      - getAttributes(fields: List<FieldDeclaration>): List<Attribute>
      - getMethods(methodDeclarations: List<MethodDeclaration>): List<Method>
      - getModifiers(declarationModifiers: List<com.github.javaparser.ast.Modifier>): List<Modifier>
    }
  class "FileParser" as 60cb13181378a01d58d76106 {
      # getCompilationUnit(file: File): CompilationUnit
    }
  class "FileRelationParser" as 60cb13181378a01d58d76107 {
      - relations: List<Relation>
      - useRelationsTargetNames: Set<String>
      - imports: List<String>
      - project: Project
      - pakage: Package
      - targetRoute: String
      ~ get(project: Project, file: File): List<Relation>
      - setPackageRoute(compilationUnit: CompilationUnit): void
      + visit(declaration: ClassOrInterfaceDeclaration, arg: Void): void
      + visit(declaration: EnumDeclaration, arg: Void): void
      - addInheritanceRelations(targetDeclarations: List<ClassOrInterfaceType>): void
      - getTarget(targetName: String): Member
      - getImport(name: String): String
      - getOutsideTarget(typeName: String): Member
      - addRelations(declaration: TypeDeclaration<?>): void
      - getVariables(declaration: TypeDeclaration<?>): List<VariableDeclarator>
      - isInConstructorParams(variable: VariableDeclarator, constructors: List<ConstructorDeclaration>): boolean
      - isInitialized(declaration: TypeDeclaration<?>, variable: VariableDeclarator): boolean
      - addCompositionRelations(variable: VariableDeclarator): void
      - getListType(type: Type): List<Type>
      - addCompositionRelation(type: Type): void
      - addAggregationRelations(targetTypes: List<Type>): void
      - addAssociationRelation(type: Type): void
      + visit(variable: VariableDeclarator, arg: Void): void
      + visit(parameter: Parameter, arg: Void): void
      + visit(object: ObjectCreationExpr, arg: Void): void
      - addUseRelationsTargetNames(type: Type): void
      - addUseRelations(): void
      - isInRelations(targetName: String): boolean
    }
  class "GitCloner" as 60cb13181378a01d58d76108 {
      - {static}  PATH: String
      + clone(url: String, email: String): Directory
    }
  class "GitRepositoryImporter" as 60cb13181378a01d58d76109 {
      - repositoryParser: RepositoryParser
      + _import(url: String, email: String): Project
    }
  class "RepositoryParser" as 60cb13181378a01d58d7610a {
      ~ {static}  PATH: String
      ~ {static}  JAVA_EXTENSION: String
      - packagePersistence: PackagePersistence
      - classPersistence: ClassPersistence
      - classMap: Map<File,Class>
      ~ get(directory: Directory): Project
      - parseDirectoryClasses(pakage: Package, directory: Directory): void
      - parseDirectoryRelations(project: Project): void
    }
}
60cb13181378a01d58d76105 -up-|> 60cb13181378a01d58d76106
60cb13181378a01d58d76107 -up-|> 60cb13181378a01d58d76106
60cb13181378a01d58d76108 .down.> 60cb13181378a01d58d76104
60cb13181378a01d58d76109 -down-> 60cb13181378a01d58d7610a
60cb13181378a01d58d76109 .down.> 60cb13181378a01d58d76108
60cb13181378a01d58d76109 .down.> 60cb13181378a01d58d76104
60cb13181378a01d58d7610a .down.> 60cb13181378a01d58d76105
60cb13181378a01d58d7610a .down.> 60cb13181378a01d58d76104
60cb13181378a01d58d7610a .down.> 60cb13181378a01d58d76107
@enduml